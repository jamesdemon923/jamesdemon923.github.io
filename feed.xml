<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://jamesdemon923.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesdemon923.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-09-29T20:54:12+00:00</updated><id>https://jamesdemon923.github.io/feed.xml</id><title type="html">blank</title><subtitle>A portfolio website of Haolan Xu. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Differentiable rendering</title><link href="https://jamesdemon923.github.io/blog/2023/Differentiable-rendering/" rel="alternate" type="text/html" title="Differentiable rendering" /><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/Differentiable%20rendering</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/Differentiable-rendering/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>###</p>

<h2 id="differentiable-rendering">Differentiable rendering</h2>

<h3 id="motivation">Motivation</h3>

<h3 id="difficulty">Difficulty</h3>

<h3 id="solution">Solution</h3>

<h4 id="edge-sampling">Edge sampling</h4>

<h4 id="path-space">Path space</h4>

<h3 id="application">Application</h3>

<h4 id="reconstruction">Reconstruction</h4>

<h3 id="recent-progress">Recent progress</h3>]]></content><author><name></name></author><category term="Graphics" /><category term="Report" /><summary type="html"><![CDATA[Introduction to Differentiable rendering]]></summary></entry><entry><title type="html">3D reconstruction</title><link href="https://jamesdemon923.github.io/blog/2023/3D-reconstruction/" rel="alternate" type="text/html" title="3D reconstruction" /><published>2023-06-24T00:00:00+00:00</published><updated>2023-06-24T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/3D%20reconstruction</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/3D-reconstruction/"><![CDATA[<h2 id="introduction">Introduction</h2>

<h2 id="multiple-view-geometry">Multiple View Geometry</h2>

<h2 id="3d-representation">3D representation</h2>

<h3 id="geometry-processing">Geometry processing</h3>

<h3 id="3d-vision">3D vision</h3>

<h2 id="3d-reconstruction">3D reconstruction</h2>
<h3 id="algorithm">Algorithm</h3>

<h4 id="structure-from-motion-sfm">Structure from Motion (SFM)</h4>

<h4 id="simultaneous-localization-and-mapping-slam">Simultaneous Localization and Mapping (SLAM)</h4>

<h2 id="understanding-and-synthesis">Understanding and synthesis</h2>]]></content><author><name></name></author><category term="Vision" /><category term="Report" /><summary type="html"><![CDATA[Introduction to 3D reconstruction]]></summary></entry><entry><title type="html">Hair &amp;amp; fur rendering</title><link href="https://jamesdemon923.github.io/blog/2023/Hair-and-fur-rendering/" rel="alternate" type="text/html" title="Hair &amp;amp; fur rendering" /><published>2023-06-22T00:00:00+00:00</published><updated>2023-06-22T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/Hair%20and%20fur%20rendering</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/Hair-and-fur-rendering/"><![CDATA[<h2 id="introduction">Introduction</h2>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<h2 id="hair--fur-rendering">Hair &amp; Fur rendering</h2>

<h3 id="representation">Representation</h3>

<h4 id="card--mesh">Card &amp; Mesh</h4>

<h4 id="strand">Strand</h4>

<h3 id="shading-model">Shading Model</h3>

<h4 id="kajiya-kay-model">Kajiya-Kay Model</h4>

\[Color = Diffuse + Specular\]

<h4 id="marschner-model">Marschner Model</h4>

<p>Marschner model is a physically-based model. It seeks to simulate the way light interacts with hair in a realistic way by taking into account the complex scattering properties of individual hair strands.
\(S = S_{R} + S_{TT} + S_{TRT}\)</p>

<h4 id="dual-scattering-model">Dual Scattering Model</h4>

<h4 id="physically-based-double-cylinder-fur-reflectance-model">Physically-based double cylinder fur reflectance Model</h4>]]></content><author><name></name></author><category term="Graphics" /><category term="Report" /><summary type="html"><![CDATA[Introduction to hair & fur rendering]]></summary></entry><entry><title type="html">Understand Nanite</title><link href="https://jamesdemon923.github.io/blog/2023/Nanite/" rel="alternate" type="text/html" title="Understand Nanite" /><published>2023-06-16T00:00:00+00:00</published><updated>2023-06-16T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/Nanite</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/Nanite/"><![CDATA[<h2 id="introduction">Introduction</h2>

<h3 id="cluster">Cluster</h3>

<h3 id="rasterization-for-pixel-triangles">Rasterization for pixel triangles</h3>

<h3 id="withdraw-problem">Withdraw problem</h3>

<h2 id="what-is-nanite">What is Nanite</h2>
<h3 id="gpu-driven-pipeline-for-vertex-processing">GPU Driven Pipeline for Vertex Processing</h3>

<h3 id="visibility-buffer-with-software-rasterization-for-pixel-processing">Visibility Buffer with Software Rasterization for Pixel Processing</h3>]]></content><author><name></name></author><category term="Graphics" /><category term="Report" /><summary type="html"><![CDATA[Nanite in UE5]]></summary></entry><entry><title type="html">How to use ImGui</title><link href="https://jamesdemon923.github.io/blog/2023/IMGUI/" rel="alternate" type="text/html" title="How to use ImGui" /><published>2023-06-14T00:00:00+00:00</published><updated>2023-06-14T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/IMGUI</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/IMGUI/"><![CDATA[<h2 id="what-is-imgui">What is ImGui</h2>

<p>ImGui stands for “Immediate Mode Graphical User Interface”. It is a programming paradigm used in user interface development where UI elements are updated and rendered each frame. In contrast to retained mode GUI, IMGUI does not keep a persistent model of the UI state.</p>

<p>Every frame, the entire user interface is recreated using a series of function calls, each of which may cause immediate rendering of UI elements on the screen. User interactions, like button clicks or slider changes, are processed in the same function that draws the UI element, typically by returning a value indicating the interaction.</p>

<p>One of the most prominent libraries implementing the IMGUI approach is <a href="https://github.com/ocornut/imgui"><strong>Dear ImGui</strong></a>. It is a bloat-free graphical user interface library for C++ primarily used for tools and game development.</p>

<h2 id="how-to-use-it">How to use it</h2>

<p>Follow this <a href="https://www.bilibili.com/video/BV13e4y1m73N/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=9d96fa0d747d399ca8c43f2a5c58026a">video in BiliBili</a>, study with the “ImGui::ShowDemoWindow();”</p>

<h3 id="1-initialize-the-imgui-window">1. Initialize the ImGui Window</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ImGui::Begin("The name of your window");
...
ImGui::End();
</code></pre></div></div>

<h3 id="2-basic-controls-in-gui">2. Basic Controls in GUI</h3>

<p>To learn the basic controls, you can see the style of the demo controls in the window, then go directly to the imgui_demo.cpp and search for the name of the control to see the usage.</p>

<p><strong>Button:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">Button</span><span class="p">(</span><span class="s">"Button"</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// std::cout &lt;&lt; "\n Button is pressed";</span>
    <span class="n">Text</span> <span class="o">=</span> <span class="s">"You click the button"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Text box:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Text is a string</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="n">Text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">InputText</span><span class="p">(</span><span class="s">"Test Text Box"</span><span class="p">,</span> <span class="n">textbox</span><span class="p">,</span> <span class="n">IM_ARRAYSIZE</span><span class="p">(</span><span class="n">textbox</span><span class="p">));</span>
</code></pre></div></div>

<p><strong>List box:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Text is a string</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="n">Text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
<span class="c1">// ImGui list box</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">BeginListBox</span><span class="p">(</span><span class="s">"List Box"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">Selectable</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
        <span class="n">Text</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">EndListBox</span><span class="p">();</span>
</code></pre></div></div>

<p><strong>Combo box:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Text is a string</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="n">Text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
<span class="c1">// ImGui combo box</span>
<span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginCombo</span><span class="p">(</span><span class="s">"Combo Box"</span><span class="p">,</span> <span class="n">Text</span><span class="p">.</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">Selectable</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
            <span class="n">Text</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">ImGui</span><span class="o">::</span><span class="n">EndCombo</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Color Editor:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ImVec4</span> <span class="n">color</span><span class="p">;</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">ColorEdit4</span><span class="p">(</span><span class="s">"Color Edit"</span><span class="p">,</span> <span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">color</span><span class="p">,</span><span class="n">ImGuiColorEditFlags_</span><span class="o">::</span><span class="n">ImGuiColorEditFlags_AlphaBar</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="3-advanced-functions">3. Advanced functions</h3>

<p>Integrate the ImGui into a <strong>.h file</strong>.</p>

<p><strong>Modify the Fonts of GUI:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Fonts are in io part</span>
<span class="n">ImGuiIO</span><span class="o">&amp;</span> <span class="n">io</span> <span class="o">=</span> <span class="n">ImGui</span><span class="o">::</span><span class="n">GetIO</span><span class="p">();</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">io</span><span class="p">;</span>

<span class="n">io</span><span class="p">.</span><span class="n">Fonts</span><span class="o">-&gt;</span><span class="n">AddFontFromFileTTF</span><span class="p">(</span><span class="s">"cameronsans.medium.ttf"</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">io</span><span class="p">.</span><span class="n">Fonts</span><span class="o">-&gt;</span><span class="n">GetGlyphRangesChineseFull</span><span class="p">());</span>
</code></pre></div></div>

<p><strong>Modify the style of GUI:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ImGuiStyle</span><span class="o">&amp;</span> <span class="n">style</span> <span class="o">=</span> <span class="n">ImGui</span><span class="o">::</span><span class="n">GetStyle</span><span class="p">();</span>

<span class="c1">// Color</span>
<span class="n">ImVec4</span><span class="o">*</span> <span class="n">colors</span> <span class="o">=</span> <span class="n">style</span><span class="p">.</span><span class="n">Colors</span><span class="p">;</span>

<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_FrameBg</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.16</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.16</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.17</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_FrameBgHovered</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.37</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.36</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.36</span><span class="n">f</span><span class="p">,</span> <span class="mf">102.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_FrameBgActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.10</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.10</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.10</span><span class="n">f</span><span class="p">,</span> <span class="mf">171.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_TitleBgActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.20</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.20</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.20</span><span class="n">f</span><span class="p">,</span> <span class="mf">255.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_CheckMark</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.61</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.61</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.61</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_SliderGrab</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.64</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.64</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.64</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_SliderGrabActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.31</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.31</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.31</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_Button</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.22</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.22</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.22</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.40</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_ButtonHovered</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.29</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.29</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.29</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_ButtonActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.13</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.13</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.13</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_Header</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.31</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_HeaderHovered</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.55</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.55</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.55</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.80</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_HeaderActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.09</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.09</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.09</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_ResizeGrip</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">1.00</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.20</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_ResizeGripHovered</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.46</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.46</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.46</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.67</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_ResizeGripActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.17</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.17</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.17</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.95</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_SeparatorActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.42</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.42</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.42</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_SeparatorHovered</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.50</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.50</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.50</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.78</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_TabHovered</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.80</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_TabActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.28</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.28</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.28</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_TabUnfocusedActive</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.19</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.19</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.19</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_DockingPreview</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.51</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.51</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.51</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.70</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_Tab</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.21</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.21</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.21</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.86</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_TabUnfocused</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.15</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.15</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.15</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.97</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_NavHighlight</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">1.00</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.40</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.13</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">);</span>
<span class="n">colors</span><span class="p">[</span><span class="n">ImGuiCol_TextSelectedBg</span><span class="p">]</span> <span class="o">=</span> <span class="n">ImVec4</span><span class="p">(</span><span class="mf">0.45</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.00</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.85</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.35</span><span class="n">f</span><span class="p">);</span>

<span class="c1">// Style of GUI</span>
<span class="n">style</span><span class="p">.</span><span class="n">WindowRounding</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="n">style</span><span class="p">.</span><span class="n">FrameRounding</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="n">style</span><span class="p">.</span><span class="n">GrabRounding</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">style</span><span class="p">.</span><span class="n">ScrollbarRounding</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">style</span><span class="p">.</span><span class="n">ScrollbarSize</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Docking:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Docking enable</span>
<span class="n">io</span><span class="p">.</span><span class="n">ConfigFlags</span> <span class="o">|=</span> <span class="n">ImGuiConfigFlags_DockingEnable</span><span class="p">;</span>
<span class="n">io</span><span class="p">.</span><span class="n">ConfigFlags</span> <span class="o">|=</span> <span class="n">ImGuiViewportFlags_NoDecoration</span><span class="p">;</span>
<span class="n">io</span><span class="p">.</span><span class="n">ConfigFlags</span> <span class="o">|=</span> <span class="n">ImGuiConfigFlags_ViewportsEnable</span><span class="p">;</span>
<span class="n">io</span><span class="p">.</span><span class="n">ConfigFlags</span> <span class="o">|=</span> <span class="n">ImGuiCol_DockingEmptyBg</span><span class="p">;</span>

<span class="c1">// Docking at the background</span>
<span class="n">ImGui</span><span class="o">::</span><span class="n">DockSpaceOverViewport</span><span class="p">();</span>

<span class="c1">// Docking at other GUI windows</span>
<span class="k">if</span> <span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">ConfigFlags</span> <span class="o">&amp;</span> <span class="n">ImGuiConfigFlags_ViewportsEnable</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Create the child window for docking</span>
    <span class="n">GLFWwindow</span><span class="o">*</span> <span class="n">backup_current_context</span> <span class="o">=</span> <span class="n">glfwGetCurrentContext</span><span class="p">();</span>
    <span class="n">ImGui</span><span class="o">::</span><span class="n">UpdatePlatformWindows</span><span class="p">();</span>
    <span class="n">ImGui</span><span class="o">::</span><span class="n">RenderPlatformWindowsDefault</span><span class="p">();</span>
    <span class="n">glfwMakeContextCurrent</span><span class="p">(</span><span class="n">backup_current_context</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Draw in ImGui:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ImDrawList</span><span class="o">*</span> <span class="n">DrawList</span> <span class="o">=</span> <span class="n">ImGui</span><span class="o">::</span><span class="n">GetForegroundDrawList</span><span class="p">();</span>
<span class="n">DrawList</span><span class="o">-&gt;</span><span class="n">AddRectFilled</span><span class="p">(</span><span class="n">ImVec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">ImGui</span><span class="o">::</span><span class="n">GetMousePos</span><span class="p">(),</span><span class="n">ImColor</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">51</span><span class="p">));</span>
</code></pre></div></div>

<p><strong>Interact with keyboard and mouse:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">IsKeyDown</span><span class="p">(</span><span class="n">ImGuiKey_Q</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">ImGui</span><span class="o">::</span><span class="n">IsItemHovered</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="s">"This is Q"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Drag:</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ImGui</span><span class="o">::</span><span class="n">Begin</span><span class="p">(</span><span class="s">"Test ImGui"</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ImGui</span><span class="o">::</span><span class="n">Button</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>

    <span class="c1">// In the same line</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ImGui</span><span class="o">::</span><span class="n">SameLine</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginDragDropSource</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"Drag: "</span><span class="p">).</span><span class="n">append</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="n">c_str</span><span class="p">());</span>

        <span class="n">ImGui</span><span class="o">::</span><span class="n">SetDragDropPayload</span><span class="p">(</span><span class="s">"DragIndexButton"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
        <span class="n">ImGui</span><span class="o">::</span><span class="n">EndDragDropSource</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">ImGui</span><span class="o">::</span><span class="n">End</span><span class="p">();</span>


<span class="n">ImGui</span><span class="o">::</span><span class="n">Begin</span><span class="p">(</span><span class="s">"Drag Window"</span><span class="p">);</span>

<span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="s">"Drag Target"</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginDragDropTarget</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">const</span> <span class="n">ImGuiPayload</span><span class="o">*</span> <span class="n">payload</span> <span class="o">=</span> <span class="n">ImGui</span><span class="o">::</span><span class="n">AcceptDragDropPayload</span><span class="p">(</span><span class="s">"DragIndexButton"</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">DragList</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">payload</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">ImGui</span><span class="o">::</span><span class="n">EndDragDropTarget</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">DragList</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">Button</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">DragList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
        <span class="n">DragList</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">DragList</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">DragList</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">ImGui</span><span class="o">::</span><span class="n">SameLine</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">ImGui</span><span class="o">::</span><span class="n">End</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="4-third-party-libraries">4. Third-Party Libraries</h3>

<p>Check <a href="https://github.com/ocornut/imgui/wiki/Useful-Extensions">here</a></p>]]></content><author><name></name></author><category term="Tool" /><category term="Note" /><summary type="html"><![CDATA[A tutorial of ImGui]]></summary></entry><entry><title type="html">Optical flow</title><link href="https://jamesdemon923.github.io/blog/2023/Optical-flow/" rel="alternate" type="text/html" title="Optical flow" /><published>2023-06-14T00:00:00+00:00</published><updated>2023-06-14T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/Optical%20flow</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/Optical-flow/"><![CDATA[<h2 id="optical-flow">Optical flow</h2>

<p>Optical flow is the pattern of apparent motion of image objects between two consecutive frames caused by the movement of object or camera. It is 2D vector field where each vector is a displacement vector showing the movement of points from first frame to second. Consider the image below.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/optical_flow/optical_flow_basic-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/optical_flow/optical_flow_basic-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/optical_flow/optical_flow_basic-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/optical_flow/optical_flow_basic.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>It shows a ball moving in 5 consecutive frames. The arrow shows its displacement vector.</p>

<p>Optical flow works on several assumptions:</p>

<ol>
  <li>
    <p>The pixel intensities of an object do not change between consecutive frames.</p>
  </li>
  <li>
    <p>Neighboring pixels have similar motion.</p>
  </li>
</ol>

<p>Consider a pixel \(I(x,y,t)\) in first frame (A new dimension, time, is added here). It moves by distance \((dx,dy)\) in next frame taken after \(dt\) time. Since those pixels are the same and intensity does not change:</p>

\[I(x,y,t)=I(x+dx,y+dy,t+dt)\]

<p>Then take taylor series approximation of right-hand side, remove common terms and divide by \(dt\) to get the following equation:</p>

\[f_{x}u+f_{y}v+f_{t}=0\]

<p>where:</p>

\[f_{x}=\cfrac{∂f}{∂x};f_{y}=\cfrac{∂f}{∂y}\]

\[u=\cfrac{dx}{dt};v=\cfrac{dy}{dt}\]

<p>Above equation is called <strong>Optical Flow equation</strong>. In it, we can find \(f_{x}\) and \(f_{y}\), they are image gradients. Similarly ft is the gradient along time. But (u,v) is unknown. We cannot solve this one equation with two unknown variables. So several methods are provided to solve this problem and one of them is Lucas-Kanade.</p>

<h2 id="algorithms">Algorithms</h2>

<h3 id="traditional-algorithms">Traditional algorithms</h3>

<p>The ideal output of an optical flow algorithm is an estimated correlation of the velocity of each pixel in two frames, or equivalently, a vector of displacements for each pixel in one image, indicating the relative position of that pixel in the other image, which is often called “dense optical flow” if every pixel in the image is used.</p>

<p>There is also an algorithm called “sparse optical flow” that tracks only a subset of points in the image. This algorithm is usually fast and reliable because it focuses attention only on specific points that can be easily tracked, and the computational cost of sparse tracking is much lower than that of dense tracking.</p>

<h4 id="lucas-kanade-optical-flow-sparse-optical-flow"><a href="https://dl.acm.org/doi/10.5555/1623264.1623280">Lucas-Kanade Optical flow (sparse optical flow)</a></h4>

<h4 id="horn-schunck-optical-flow-dense-optical-flow">Horn-Schunck Optical flow (dense optical flow)</h4>

<h3 id="deep-learning-algorithms">Deep learning algorithms</h3>

<h4 id="flownet"><a href="https://arxiv.org/pdf/1504.06852.pdf">FlowNet</a></h4>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/optical_flow/Structure%20of%20FlowNet-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/optical_flow/Structure%20of%20FlowNet-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/optical_flow/Structure%20of%20FlowNet-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/optical_flow/Structure%20of%20FlowNet.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h4 id="flownet-20"><a href="https://arxiv.org/pdf/1612.01925.pdf">FlowNet 2.0</a></h4>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/optical_flow/Structure%20of%20FlowNet2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/optical_flow/Structure%20of%20FlowNet2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/optical_flow/Structure%20of%20FlowNet2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/optical_flow/Structure%20of%20FlowNet2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h4 id="pwc-net"><a href="https://arxiv.org/pdf/1709.02371.pdf">PWC-Net</a></h4>

<p>Refer to Figure,3</p>

<h4 id="maskflownet"><a href="https://arxiv.org/pdf/2003.10955.pdf">MaskFlownet</a></h4>

<p>Maskflownest takes the effect of occlusion into account when solving for the optical flow field</p>

<h4 id="ppac-hd3"><a href="https://arxiv.org/pdf/2003.14407.pdf">PPAC-HD3</a></h4>]]></content><author><name></name></author><category term="Vision" /><category term="Report" /><summary type="html"><![CDATA[About the optical flow and related algorithms]]></summary></entry><entry><title type="html">NeRF (Neural Radiance Fields)</title><link href="https://jamesdemon923.github.io/blog/2023/NeRF/" rel="alternate" type="text/html" title="NeRF (Neural Radiance Fields)" /><published>2023-06-13T00:00:00+00:00</published><updated>2023-06-13T00:00:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/NeRF</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/NeRF/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>David Marr, the pioneer of computer vision, once defined the ultimate computer vision problem as the output of a three-dimensional object’s position and shape, which is “reconstructed” from the input of a two-dimensional image; other tasks, such as recognition, detection, etc., in Marr’s theory, can only be called “Pattern Recognition” problems, not “Computer Vision” problems. The difference is that Marr proved that if the ultimate problem can be solved, then all other problems can be solved. So in terms of the whole field of computer vision, NeRF (Neural Radiance Fields) is solving the most fundamental problem of computer vision, and the effect it shows is the most fundamental progress in the field of computer vision.</p>

<h3 id="view-synthesis">View synthesis</h3>

<h4 id="sdf">SDF</h4>

<h4 id="neural-volume">Neural volume</h4>

<p>RGB-alpha volume rendering for view synthesis</p>

<h2 id="nerf">NeRF</h2>

<p>NeRF (Neural Radiance Fields) fits Radiance Fields with a neural network, which is specifically a multilayer perceptron. And it is actually an implicit scene representation because a 3D model cannot be seen directly like point cloud, mesh, or voxel. It can represent the scene as the volume density and color value of any point in space. With the scene representation in the form of NeRF, we can render the scene and generate a simulated image of the new view.</p>

<h3 id="radiance-field">Radiance field</h3>

<h3 id="volume-rendering">Volume rendering</h3>

<h3 id="neural-radiance-field">Neural Radiance field</h3>

<h3 id="features">Features</h3>

<h4 id="positional-encoding">Positional encoding</h4>

<h4 id="hierarchical-volume-sampling">Hierarchical volume sampling</h4>

<h3 id="post-work">Post work</h3>]]></content><author><name></name></author><category term="Graphics" /><category term="Vision" /><category term="Report" /><summary type="html"><![CDATA[Introduction to NeRF]]></summary></entry><entry><title type="html">Morphable model of 3D faces</title><link href="https://jamesdemon923.github.io/blog/2023/3DMM/" rel="alternate" type="text/html" title="Morphable model of 3D faces" /><published>2023-06-12T14:14:00+00:00</published><updated>2023-06-12T14:14:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/3DMM</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/3DMM/"><![CDATA[<h2 id="introduction">Introduction</h2>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<h2 id="what-is-3d-morphable-model">What is 3D morphable model</h2>
<h3 id="example-of-sub-heading-1-1">Example of Sub-Heading 1</h3>

<h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3>]]></content><author><name></name></author><category term="Graphics" /><category term="Vision" /><category term="Modeling" /><category term="Report" /><summary type="html"><![CDATA[Morphable model of 3D faces]]></summary></entry><entry><title type="html">Fluid Simulation</title><link href="https://jamesdemon923.github.io/blog/2023/Fluid-simulation/" rel="alternate" type="text/html" title="Fluid Simulation" /><published>2023-06-12T14:14:00+00:00</published><updated>2023-06-12T14:14:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/Fluid%20simulation</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/Fluid-simulation/"><![CDATA[<h2 id="introduction">Introduction</h2>

<h2 id="representation">Representation</h2>

<h3 id="particle">Particle</h3>

<p>Base on the <strong>Lagrangian view</strong>. Use the particle to represent the sensor moving with the materials.</p>

<p>Use <a href="https://en.wikipedia.org/wiki/Smoothed-particle_hydrodynamics">Smoothed Particle Hydrodynamic (SPH)</a></p>

<p>For example, a glass of water, <a href="http://mmacklin.com/pbf_sig_preprint.pdf">using SPH directly with particles to simulate</a>, no grid required.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/fluid_simulation/SPH%20for%20small%20water-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/fluid_simulation/SPH%20for%20small%20water-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/fluid_simulation/SPH%20for%20small%20water-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/fluid_simulation/SPH%20for%20small%20water.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>
<p>A <a href="http://sph-tutorial.physics-simulation.org/">tutorial</a> about SPH</p>

<h3 id="grid">Grid</h3>

<p>Based on the <strong>Eulerian view</strong>. Use the grid to represent the still sensor.</p>

<p>The key is to solve <a href="https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations">Navier Stokes Equations (NS equation)</a></p>

<p>A small lake is simulated on a certain coarse <strong>grid</strong> using the Navier-Stokes equation (NS equation) or the Euler equation. And it can extend to the <a href="http://web.stanford.edu/class/cs237d/smoke.pdf">3D smoke simulation</a>.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/fluid_simulation/smoke%20simulation-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/fluid_simulation/smoke%20simulation-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/fluid_simulation/smoke%20simulation-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/fluid_simulation/smoke%20simulation.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<h2 id="other-approaches-to-simulate">Other approaches to simulate</h2>

<ol>
  <li>Use <a href="http://www-evasion.imag.fr/Membres/Fabrice.Neyret/NaturalScenes/fluids/water/waves/fluids/waves/Jonathan/articlesCG/simulating-ocean-water-01.pdf">FFT</a> to simulate the ocean.</li>
</ol>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/fluid_simulation/FFT-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/fluid_simulation/FFT-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/fluid_simulation/FFT-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/fluid_simulation/FFT.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>
<ol>
  <li>Use <a href="https://visualcomputing.ist.ac.at/publications/2020/WaveCurves/">wave curves</a> to simulate the Lagrangian water waves</li>
</ol>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/fluid_simulation/wave%20curves-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/fluid_simulation/wave%20curves-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/fluid_simulation/wave%20curves-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/fluid_simulation/wave%20curves.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>]]></content><author><name></name></author><category term="Graphics" /><category term="Simulation" /><category term="Report" /><summary type="html"><![CDATA[Introduction to Fluid Simulation]]></summary></entry><entry><title type="html">CUDA</title><link href="https://jamesdemon923.github.io/blog/2023/CUDA/" rel="alternate" type="text/html" title="CUDA" /><published>2023-06-10T14:14:00+00:00</published><updated>2023-06-10T14:14:00+00:00</updated><id>https://jamesdemon923.github.io/blog/2023/CUDA</id><content type="html" xml:base="https://jamesdemon923.github.io/blog/2023/CUDA/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p>

<h2 id="what-is-cuda">What is CUDA</h2>

<h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3>

<h2 id="cuda">CUDA</h2>
<h3 id="example-of-sub-heading-1-1">Example of Sub-Heading 1</h3>

<h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3>]]></content><author><name></name></author><category term="Graphics" /><category term="Report" /><summary type="html"><![CDATA[CUDA]]></summary></entry></feed>